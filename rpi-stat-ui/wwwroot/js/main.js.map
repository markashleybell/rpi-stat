{"version":3,"sources":["webpack://Stat/webpack/bootstrap","webpack://Stat/../../src/ILogger.ts","webpack://Stat/../../src/Utils.ts","webpack://Stat/../../src/Errors.ts","webpack://Stat/../../src/HttpClient.ts","webpack://Stat/../../src/Loggers.ts","webpack://Stat/../../src/TextMessageFormat.ts","webpack://Stat/./node_modules/buffer/index.js","webpack://Stat/../../src/NodeHttpClient.ts","webpack://Stat/../../src/HandshakeProtocol.ts","webpack://Stat/./Scripts/index.ts","webpack://Stat/(webpack)/buildin/global.js","webpack://Stat/./node_modules/base64-js/index.js","webpack://Stat/./node_modules/ieee754/index.js","webpack://Stat/./node_modules/isarray/index.js","webpack://Stat/./Scripts/types/HubEndpoint.ts","webpack://Stat/../../src/IHubProtocol.ts","webpack://Stat/../../src/XhrHttpClient.ts","webpack://Stat/../../src/DefaultHttpClient.ts","webpack://Stat/../../src/HubConnection.ts","webpack://Stat/../../src/Subject.ts","webpack://Stat/../../src/ITransport.ts","webpack://Stat/../../src/DefaultReconnectPolicy.ts","webpack://Stat/../../src/AbortController.ts","webpack://Stat/../../src/LongPollingTransport.ts","webpack://Stat/../../src/ServerSentEventsTransport.ts","webpack://Stat/../../src/WebSocketTransport.ts","webpack://Stat/../../src/HttpConnection.ts","webpack://Stat/../../src/JsonHubProtocol.ts","webpack://Stat/../../src/HubConnectionBuilder.ts","webpack://Stat/../../src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LogLevel","isRequired","val","Error","isIn","values","window","self","this","isBrowser","isWebWorker","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","formatArrayBuffer","ArrayBuffer","constructor","logger","transportName","httpClient","url","accessTokenFactory","content","logMessageContent","token","headers","log","Trace","responseType","post","response","statusCode","createLogger","undefined","ConsoleLogger","Information","instance","subject","observer","dispose","index","observers","indexOf","splice","cancelCallback","catch","_","minimumLogLevel","outputConsole","console","logLevel","message","Critical","error","Date","toISOString","Warning","warn","info","errorMessage","trueProto","__proto__","statusText","options","send","method","delete","getCookieString","_logLevel","_message","NullLogger","write","output","TextMessageFormat","RecordSeparator","parse","input","messages","split","pop","RecordSeparatorCode","String","fromCharCode","base64","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","arg","encodingOrOffset","allocUnsafe","from","TypeError","array","byteOffset","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","slice","fromString","obj","isBuffer","len","checked","copy","buffer","type","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","requestModule","XMLHttpRequest","requireFunc","cookieJar","jar","request","defaults","httpRequest","Promise","resolve","reject","requestBody","currentRequest","body","timeout","abortSignal","onabort","statusMessage","abort","writeHandshakeRequest","handshakeRequest","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","textData","substring","connection","signalR","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","on","HubEndpoint","ReceiveMessage","err","SendMessage","g","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","MessageType","aborted","xhr","open","withCredentials","setRequestHeader","keys","header","onload","status","responseText","onerror","ontimeout","HttpClient","NodeHttpClient","HubConnectionState","next","item","complete","subscribe","HttpTransportType","TransferFormat","protocol","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","handshakeProtocol","HandshakeProtocol","onreceive","processIncomingData","onclose","connectionClosed","callbacks","methods","closedCallbacks","reconnectingCallbacks","reconnectedCallbacks","invocationId","receivedHandshakeResponse","connectionState","Disconnected","connectionStarted","cachedPingMessage","writeMessage","Ping","HubConnection","connectionId","baseUrl","Reconnecting","startPromise","startWithStateTransitions","Connecting","Debug","startInternal","Connected","stopDuringStartError","handshakePromise","handshakeResolver","handshakeRejecter","transferFormat","version","sendMessage","cleanupTimeout","resetTimeoutPeriod","resetKeepAliveInterval","cleanupPingTimer","stop","stopPromise","stopInternal","Disconnecting","reconnectDelayHandle","clearTimeout","completeClose","stream","methodName","promiseQueue","streams","streamIds","invocationDescriptor","createStreamInvocation","args","cancelInvocation","createCancelInvocation","then","sendWithProtocol","invocationEvent","Completion","launchStreams","sendPromise","createInvocation","invoke","result","newMethod","off","handlers","removeIdx","callback","onreconnecting","onreconnected","processHandshakeResponse","parseMessages","Invocation","invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","pingServerHandle","setTimeout","features","inherentKeepAlive","timeoutHandle","serverTimeout","invocationMessage","cancelCallbacksWithError","reconnect","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","nonblocking","streamId","createCompletionMessage","createStreamItemMessage","replaceStreamingParams","argument","isObservable","StreamInvocation","id","CancelInvocation","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","retryDelays","retryContext","isAborted","pollAbort","AbortController","running","connect","Binary","pollOptions","signal","getAccessToken","updateHeaderToken","pollUrl","closeError","receiving","poll","pollAborted","raiseOnClose","deleteOptions","logMessage","eventSourceConstructor","encodeURIComponent","opened","Text","eventSource","cookies","Cookie","onmessage","close","onopen","webSocketConstructor","webSocket","isNode","binaryType","_event","event","ErrorEvent","readyState","OPEN","wasClean","reason","WebSocketModule","EventSourceModule","negotiateVersion","resolveUrl","WebSocket","EventSource","startInternalPromise","sendQueue","TransportSendQueue","transport","stopPromiseResolver","stopError","stopConnection","skipNegotiation","WebSockets","constructTransport","startTransport","negotiateResponse","redirects","getNegotiationResponse","ProtocolVersion","accessToken","createTransport","negotiateUrl","resolveNegotiateUrl","connectionToken","createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","resolveTransportOrError","ServerSentEvents","LongPolling","actualTransport","transportMatches","transferFormats","map","ex","document","aTag","createElement","href","executing","sendBufferedData","PromiseSource","transportResult","sendLoopPromise","sendLoop","bufferData","promise","concatBuffers","arrayBuffers","totalLength","reduce","resolver","rejecter","hubMessages","parsedMessage","isInvocationMessage","isStreamItemMessage","isCompletionMessage","assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","configureLogging","logging","mapping","parseLogLevel","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","retryDelaysOrReconnectPolicy","DefaultReconnectPolicy","VERSION"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n        responseType,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public outputConsole: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n        this.outputConsole = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.outputConsole.error(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.outputConsole.warn(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.outputConsole.info(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.outputConsole.log(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport * as Request from \"@types/request\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nlet requestModule: Request.RequestAPI<Request.Request, Request.CoreOptions, Request.RequiredUriUrl>;\r\nif (typeof XMLHttpRequest === \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    requestModule = requireFunc(\"request\");\r\n}\r\n\r\n/** @private */\r\nexport class NodeHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n    private readonly request: typeof requestModule;\r\n    private readonly cookieJar: Request.CookieJar;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        if (typeof requestModule === \"undefined\") {\r\n            throw new Error(\"The 'request' module could not be loaded.\");\r\n        }\r\n\r\n        this.logger = logger;\r\n        this.cookieJar = requestModule.jar();\r\n        this.request = requestModule.defaults({ jar: this.cookieJar });\r\n    }\r\n\r\n    public send(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n\r\n            let requestBody: Buffer | string;\r\n            if (isArrayBuffer(httpRequest.content)) {\r\n                requestBody = Buffer.from(httpRequest.content);\r\n            } else {\r\n                requestBody = httpRequest.content || \"\";\r\n            }\r\n\r\n            const currentRequest = this.request(httpRequest.url!, {\r\n                body: requestBody,\r\n                // If binary is expected 'null' should be used, otherwise for text 'utf8'\r\n                encoding: httpRequest.responseType === \"arraybuffer\" ? null : \"utf8\",\r\n                headers: {\r\n                    // Tell auth middleware to 401 instead of redirecting\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...httpRequest.headers,\r\n                },\r\n                method: httpRequest.method,\r\n                timeout: httpRequest.timeout,\r\n            },\r\n            (error, response, body) => {\r\n                if (httpRequest.abortSignal) {\r\n                    httpRequest.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (error) {\r\n                    if (error.code === \"ETIMEDOUT\") {\r\n                        this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                        reject(new TimeoutError());\r\n                    }\r\n                    this.logger.log(LogLevel.Warning, `Error from HTTP request. ${error}`);\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                if (response.statusCode >= 200 && response.statusCode < 300) {\r\n                    resolve(new HttpResponse(response.statusCode, response.statusMessage || \"\", body));\r\n                } else {\r\n                    reject(new HttpError(response.statusMessage || \"\", response.statusCode || 0));\r\n                }\r\n            });\r\n\r\n            if (httpRequest.abortSignal) {\r\n                httpRequest.abortSignal.onabort = () => {\r\n                    currentRequest.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.cookieJar.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","import * as signalR from \"@microsoft/signalr\";\r\nimport { HubEndpoint } from \"./types/HubEndpoint\";\r\n\r\nconst connection = new signalR.HubConnectionBuilder()\r\n    .withUrl(\"/stathub\")\r\n    .withAutomaticReconnect()\r\n    .build();\r\n\r\nconnection.on(HubEndpoint.ReceiveMessage, (message: string) => console.log(message));\r\n\r\nconnection.start().catch((err: any) => console.log(err));\r\n\r\nexport function send(message: string) {\r\n    connection.send(HubEndpoint.SendMessage, message);\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","export class HubEndpoint {\r\n    public static readonly SendMessage = \"SendMessage\";\r\n    public static readonly ReceiveMessage = \"ReceiveMessage\";\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer | Buffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer | Buffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { NodeHttpClient } from \"./NodeHttpClient\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            this.httpClient = new NodeHttpClient(logger);\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private readonly reconnectPolicy?: IRetryPolicy;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private invocationId: number;\r\n\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectingCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectedCallbacks: Array<(connectionId?: string) => void>;\r\n\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private stopDuringStartError?: Error;\r\n\r\n    private connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private startPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private reconnectDelayHandle?: any;\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.reconnectPolicy = reconnectPolicy;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.reconnectingCallbacks = [];\r\n        this.reconnectedCallbacks = [];\r\n        this.invocationId = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this.startPromise = this.startWithStateTransitions();\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startWithStateTransitions(): Promise<void> {\r\n        if (this.connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Connecting;\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this.startInternal();\r\n\r\n            this.connectionState = HubConnectionState.Connected;\r\n            this.connectionStarted = true;\r\n            this.logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async startInternal() {\r\n        this.stopDuringStartError = undefined;\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this.protocol.name,\r\n                version: this.protocol.version,\r\n            };\r\n\r\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this.cleanupTimeout();\r\n            this.resetTimeoutPeriod();\r\n            this.resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this.stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this.stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this.cleanupTimeout();\r\n            this.cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this.startPromise;\r\n\r\n        this.stopPromise = this.stopInternal();\r\n        await this.stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private stopInternal(error?: Error): Promise<void> {\r\n        if (this.connectionState === HubConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise!;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this.reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this.logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this.reconnectDelayHandle);\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            this.completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        this.stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this.launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private sendWithProtocol(message: any) {\r\n        return this.sendMessage(this.protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));\r\n\r\n        this.launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this.launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this.reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this.stopPromise = this.stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        this.cleanupPingTimer();\r\n        this.pingServerHandle = setTimeout(async () => {\r\n            if (this.connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this.sendMessage(this.cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this.cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this.stopPromise = this.stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this.stopDuringStartError = this.stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this.handshakeResolver) {\r\n            this.handshakeResolver();\r\n        }\r\n\r\n        this.cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.completeClose(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.reconnect(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected) {\r\n            this.completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private completeClose(error?: Error) {\r\n        if (this.connectionStarted) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.connectionStarted = false;\r\n\r\n            try {\r\n                this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this.logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this.completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this.onreconnecting) {\r\n            try {\r\n                this.reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this.logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.startInternal();\r\n\r\n                this.connectionState = HubConnectionState.Connected;\r\n                this.logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this.onreconnected) {\r\n                    try {\r\n                        this.reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this.logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                    this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect attempt. Done reconnecting.\");\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this.logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this.completeClose();\r\n    }\r\n\r\n    private getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this.reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const invocationId = this.invocationId;\r\n            this.invocationId++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private launchStreams(streams: Array<IStreamResult<any>>, promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private replaceStreamingParams(args: any[]): [Array<IStreamResult<any>>, string[]] {\r\n        const streams: Array<IStreamResult<any>> = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this.isObservable(argument)) {\r\n                const streamId = this.invocationId;\r\n                this.invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this.invocationId;\r\n        this.invocationId++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: invocationId.toString(),\r\n            streamIds,\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly retryDelays: Array<number | null>;\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this.retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this.retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly pollAbort: AbortController;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 100000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this.httpClient.getCookieString(url);\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true, headers: { Cookie: cookies } } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: MessageEvent) => {\r\n                    const error = new Error(e.data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode && cookies) {\r\n                // Only pass cookies when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: {\r\n                        Cookie: `${cookies}`,\r\n                    },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this.close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (event && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting \",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\nlet WebSocketModule: any = null;\r\nlet EventSourceModule: any = null;\r\nif (Platform.isNode && typeof require !== \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    WebSocketModule = requireFunc(\"ws\");\r\n    EventSourceModule = requireFunc(\"eventsource\");\r\n}\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startInternalPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private stopPromiseResolver!: (value?: PromiseLike<void>) => void;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n    private sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (WebSocketModule) {\r\n                options.WebSocket = WebSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof EventSourceModule !== \"undefined\") {\r\n                options.EventSource = EventSourceModule;\r\n            }\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n        this.options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startInternalPromise = this.startInternal(transferFormat);\r\n        await this.startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this.connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this.stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this.connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this.logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this.connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this.sendQueue) {\r\n            this.sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise;\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnecting;\r\n\r\n        this.stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this.stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this.stopInternal(error);\r\n        await this.stopPromise;\r\n    }\r\n\r\n    private async stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        if (this.sendQueue) {\r\n            try {\r\n                await this.sendQueue.stop();\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            }\r\n            this.sendQueue = undefined;\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this.stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n            this.stopConnection();\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnecting || this.connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this.logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this.connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        let headers;\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n        }\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate ${response.statusCode}`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this.isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this.getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this.createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this.startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this.connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this.logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this.stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this.constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n        this.stopError = undefined;\r\n\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Connecting) {\r\n            this.logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection hasn't yet left the in the connecting state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this.stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.onclose && this.connectionStarted) {\r\n            this.connectionStarted = false;\r\n\r\n            try {\r\n                this.onclose(error);\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this.negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private buffer: any[] = [];\r\n    private sendBufferedData: PromiseSource;\r\n    private executing: boolean = true;\r\n    private transportResult?: PromiseSource;\r\n    private sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly transport: ITransport) {\r\n        this.sendBufferedData = new PromiseSource();\r\n        this.transportResult = new PromiseSource();\r\n\r\n        this.sendLoopPromise = this.sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this.bufferData(data);\r\n        if (!this.transportResult) {\r\n            this.transportResult = new PromiseSource();\r\n        }\r\n        return this.transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.executing = false;\r\n        this.sendBufferedData.resolve();\r\n        return this.sendLoopPromise;\r\n    }\r\n\r\n    private bufferData(data: string | ArrayBuffer): void {\r\n        if (this.buffer.length && typeof(this.buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this.buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this.buffer.push(data);\r\n        this.sendBufferedData.resolve();\r\n    }\r\n\r\n    private async sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this.sendBufferedData.promise;\r\n\r\n            if (!this.executing) {\r\n                if (this.transportResult) {\r\n                    this.transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this.sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this.transportResult!;\r\n            this.transportResult = undefined;\r\n\r\n            const data = typeof(this.buffer[0]) === \"string\" ?\r\n                this.buffer.join(\"\") :\r\n                TransportSendQueue.concatBuffers(this.buffer);\r\n\r\n            this.buffer.length = 0;\r\n\r\n            try {\r\n                await this.transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private resolver?: () => void;\r\n    private rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this.resolver, this.rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this.resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this.rejecter!(reason);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n\r\n// Everything that users need to access must be exported here. Including interfaces.\r\nexport { AbortSignal } from \"./AbortController\";\r\nexport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nexport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nexport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nexport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nexport { HubConnection, HubConnectionState } from \"./HubConnection\";\r\nexport { HubConnectionBuilder } from \"./HubConnectionBuilder\";\r\nexport { MessageType, MessageHeaders, HubMessage, HubMessageBase, HubInvocationMessage, InvocationMessage, StreamInvocationMessage, StreamItemMessage, CompletionMessage,\r\n    PingMessage, CloseMessage, CancelInvocationMessage, IHubProtocol } from \"./IHubProtocol\";\r\nexport { ILogger, LogLevel } from \"./ILogger\";\r\nexport { HttpTransportType, TransferFormat, ITransport } from \"./ITransport\";\r\nexport { IStreamSubscriber, IStreamResult, ISubscription } from \"./Stream\";\r\nexport { NullLogger } from \"./Loggers\";\r\nexport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nexport { Subject } from \"./Subject\";\r\nexport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n"],"sourceRoot":""}